{
	"info": {
		"_postman_id": "42f3907f-f1ba-48c3-8fcd-59c620245f6b",
		"name": "OCI PLC Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8399406"
	},
	"item": [
		{
			"name": "Upload Inventory (Happy Path)",
			"item": [
				{
					"name": "1. Get Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Get Access Token Tests...');\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response is valid and has a JSON body', () => {\r",
									"     pm.response.to.be.success;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set('bearerToken','Bearer ' + jsonData.access_token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Get Access Token Pre-request Script...');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "login.salesforce.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
									"type": "text"
								},
								{
									"key": "assertion",
									"value": "{{JWT}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://login.salesforce.com/services/oauth2/token",
							"protocol": "https",
							"host": [
								"login",
								"salesforce",
								"com"
							],
							"path": [
								"services",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Authenticate into Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Authenticate into Org Tests...');",
									"",
									"pm.test('Status code is 204', () => {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Authenticate into Org Pre-request Script...');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{bearerToken}}"
							}
						],
						"url": {
							"raw": "{{host}}/inventory/internal/v1/organizations/{{tenantId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"inventory",
								"internal",
								"v1",
								"organizations",
								"{{tenantId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Get Inventory Import Link",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Get Inventory Import Link Pre-request Script...');",
									"",
									"//const fileName = data.fileName;",
									"//console.log('fileName: ' + fileName);",
									"",
									"let importInitiateBody = JSON.stringify({'fileName': pm.environment.get('locationInventoryImportFileName'),'linkDuration': 60});",
									"pm.environment.set('locationInventoryImportInitiateBody',importInitiateBody);",
									"",
									"pm.environment.set('locationInventoryImportId',null);",
									"pm.environment.set('locationInventoryImportStatusLink',null);",
									"pm.environment.set('locationInventoryImportUploadLink',null);",
									"pm.environment.set('locationInventoryImportResultsLink',null);",
									"",
									"//reset to account for the other imports/exports using the same variable",
									"pm.environment.set('countOfStatusCheck',null)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Get Inventory Import Link Tests...');",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.environment.set('locationInventoryImportId', jsonData.importId);",
									"pm.environment.set('locationInventoryImportStatusLink', jsonData.importStatusLink);",
									"pm.environment.set('locationInventoryImportUploadLink', jsonData.uploadLink);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{bearerToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{locationInventoryImportInitiateBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/inventory/impex/v1/organizations/{{tenantId}}/availability-records/imports",
							"host": [
								"{{host}}"
							],
							"path": [
								"inventory",
								"impex",
								"v1",
								"organizations",
								"{{tenantId}}",
								"availability-records",
								"imports"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Post Inventory Import File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Post Inventory Import File Tests...');\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Post Inventory Import File Pre-request Script...')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ImportsUploadLinkPostBody",
									"value": "{{importsUploadLinkPostBody}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}{{locationInventoryImportUploadLink}}",
							"host": [
								"{{host}}{{locationInventoryImportUploadLink}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Get Inventory Import Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Get Inventory Import Status Tests...');",
									"",
									"const assert = require('assert').strict;",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let currentStatus = utils.evaluateStatusCheck(pm, postman, 'locationInventoryImportStatus', 'Location inventory import, ');",
									"",
									"switch (currentStatus) {",
									"    case 'retry':",
									"        setTimeout(function() {}, 1000);",
									"        break;",
									"    case 'success':",
									"        let jsonData = pm.response.json();",
									"        let locationInventoryImportResultsLink = jsonData.import.fullResults.href;",
									"        pm.environment.set('locationInventoryImportResultsLink', locationInventoryImportResultsLink);",
									"        break;",
									"    default:",
									"        assert.fail(currentStatus);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Get Inventory Import Status Pre-request Script...');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}{{locationInventoryImportStatusLink}}",
							"host": [
								"{{host}}{{locationInventoryImportStatusLink}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Get Inventory Import Results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Get Inventory Import Results Tests...');",
									"",
									"const assert = require('assert').strict;",
									"utils.responseCodeCheck(pm, postman, 200, request);",
									"",
									"try {",
									"    //this will fail if there are errors, because the response body when there are errors, ",
									"    // is not standard json and can't be converted to json.",
									"    let jsonData = pm.response.json();",
									"    let currentStatus = jsonData.status;",
									"    console.log('Final result status is: ' + currentStatus);",
									"    assert.equal(currentStatus, 'COMPLETED_WITHOUT_ERRORS');",
									"} catch (err) {",
									"    assert.fail('There were errors importing. See the response body for specifics.'); +",
									"    postman.setNextRequest(null);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Get Inventory Import Results Pre-request Script...');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{bearerToken}}"
							}
						],
						"url": {
							"raw": "{{host}}{{locationInventoryImportResultsLink}}",
							"host": [
								"{{host}}{{locationInventoryImportResultsLink}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Running Jobs",
			"item": [
				{
					"name": "1. Get Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Get Access Token Tests...');\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response is valid and has a JSON body', () => {\r",
									"     pm.response.to.be.success;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set('bearerToken','Bearer ' + jsonData.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Get Access Token Pre-request Script...');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "login.salesforce.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
									"type": "text"
								},
								{
									"key": "assertion",
									"value": "{{JWT}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://login.salesforce.com/services/oauth2/token",
							"protocol": "https",
							"host": [
								"login",
								"salesforce",
								"com"
							],
							"path": [
								"services",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Authenticate into Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Authenticate into Org Tests...');",
									"",
									"pm.test('Status code is 204', () => {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Authenticate into Org Pre-request Script...');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{bearerToken}}"
							}
						],
						"url": {
							"raw": "{{host}}/inventory/internal/v1/organizations/{{tenantId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"inventory",
								"internal",
								"v1",
								"organizations",
								"{{tenantId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Get Jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Get Jobs Tests...');\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response is valid and has a JSON body', () => {\r",
									"     pm.response.to.be.success;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('Validate the response and save the import job ids array to collection variables', () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.imports).to.exist;\r",
									"    pm.expect(jsonData.imports).to.be.an('array');\r",
									"    const importJobIds = jsonData.imports;\r",
									"    console.log('Number of Import Job Ids: ' + importJobIds.length + ' Details:\\r\\n' + importJobIds.join(',\\r\\n'));\r",
									"    pm.collectionVariables.set('_importJobIds', importJobIds);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Get Jobs Pre-request Script...');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/inventory/impex/v1/organizations/{{tenantId}}/availability-records/imports",
							"host": [
								"{{host}}"
							],
							"path": [
								"inventory",
								"impex",
								"v1",
								"organizations",
								"{{tenantId}}",
								"availability-records",
								"imports"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get and Delete Import Jobs",
			"item": [
				{
					"name": "1. Get Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Get Access Token Tests...');\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response is valid and has a JSON body', () => {\r",
									"     pm.response.to.be.success;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"bearerToken\",\"Bearer \" + jsonData.access_token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Get Access Token Pre-request Script...');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "login.salesforce.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
									"type": "text"
								},
								{
									"key": "assertion",
									"value": "{{JWT}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://login.salesforce.com/services/oauth2/token",
							"protocol": "https",
							"host": [
								"login",
								"salesforce",
								"com"
							],
							"path": [
								"services",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Authenticate into Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Authenticate into Org Tests...');",
									"",
									"pm.test('Status code is 204', () => {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Authenticate into Org Pre-request Script...');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{bearerToken}}"
							}
						],
						"url": {
							"raw": "{{host}}/inventory/internal/v1/organizations/{{tenantId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"inventory",
								"internal",
								"v1",
								"organizations",
								"{{tenantId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Get Jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Get Jobs Tests...\");\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response is valid and has a JSON body', () => {\r",
									"     pm.response.to.be.success;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('Validate the response and save the import job ids array to collection variables', () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.imports).to.exist;\r",
									"    pm.expect(jsonData.imports).to.be.an('array');\r",
									"    const importJobIds = jsonData.imports;\r",
									"    console.log('Number of Import Job Ids: ' + importJobIds.length + ' Details:\\r\\n' + importJobIds.join(',\\r\\n'));\r",
									"    pm.collectionVariables.set('_importJobIds', importJobIds);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Get Jobs Pre-request Script...');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/inventory/impex/v1/organizations/{{tenantId}}/availability-records/imports",
							"host": [
								"{{host}}"
							],
							"path": [
								"inventory",
								"impex",
								"v1",
								"organizations",
								"{{tenantId}}",
								"availability-records",
								"imports"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Delete First Job in Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Delete First Job in Collection Tests...');\r",
									"\r",
									"pm.test('Status code is 204', () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"/*\r",
									"pm.test('Response is valid and has a JSON body', () => {\r",
									"     pm.response.to.be.success;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Delete First Job in Collection Pre-request Script...');\r",
									"\r",
									"const importJobIds = pm.collectionVariables.get('_importJobIds');\r",
									"const importJobId = importJobIds[0];\r",
									"pm.collectionVariables.set('_importJobId', importJobId);\r",
									"const host =  + pm.environment.get('host');\r",
									"const tenantId = pm.environment.get('tenantId');\r",
									"const uri = host + '/inventory/impex/v1/organizations/' + tenantId + '/availability-records/imports/' + importJobId\r",
									"\r",
									"console.log('URL: ' + uri);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/inventory/impex/v1/organizations/{{tenantId}}/availability-records/imports/{{_importJobId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"inventory",
								"impex",
								"v1",
								"organizations",
								"{{tenantId}}",
								"availability-records",
								"imports",
								"{{_importJobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Get Jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Get Jobs Tests...\");\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response is valid and has a JSON body', () => {\r",
									"     pm.response.to.be.success;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('Validate the response and save the import job ids array to collection variables', () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.imports).to.exist;\r",
									"    pm.expect(jsonData.imports).to.be.an('array');\r",
									"    const importJobIds = jsonData.imports;\r",
									"    console.log('Number of Import Job Ids: ' + importJobIds.length + ' Details:\\r\\n' + importJobIds.join(',\\r\\n'));\r",
									"    pm.collectionVariables.set('_importJobIds', importJobIds);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Get Jobs Pre-request Script...');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/inventory/impex/v1/organizations/{{tenantId}}/availability-records/imports",
							"host": [
								"{{host}}"
							],
							"path": [
								"inventory",
								"impex",
								"v1",
								"organizations",
								"{{tenantId}}",
								"availability-records",
								"imports"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"utils = {",
					"    responseCodeCheck: (pmVar,postmanVar,desiredCode,requestVar)=>{",
					"        pmVar.test(\"Status test\", function () {",
					"            const assert = require('assert').strict;",
					"            let actualResponseCode=pmVar.response.code;",
					"            if(actualResponseCode != desiredCode){",
					"                let errorMessage=requestVar.name+\": Expected response code of: \" + desiredCode + \" but was instead: \" + actualResponseCode;",
					"                console.log(errorMessage);",
					"                postmanVar.setNextRequest(null);",
					"                assert.fail(errorMessage);",
					"            }",
					"        });",
					"     ",
					"    },",
					"    evaluateStatusCheck: (pmVar, postmanVar, endpoint, endpointDescription)=>{",
					"        let jsonData= pmVar.response.json()",
					"        //javascript object is an array of results, get the 1st one",
					"        let result=jsonData;",
					"        //grab the status",
					"        let status=result.status.toLowerCase();",
					"        switch(status){",
					"            case \"expired\":",
					"            case \"failed\":",
					"                console.log(endpointDescription + \" failed with a status of: \"+ status);",
					"                return \"failed-\"+status;",
					"            case \"completed\":",
					"                console.log(endpointDescription + \" success.\");",
					"                return \"success\";",
					"            default:",
					"                let limit = pmVar.environment.get(\"statusCheckLimit\");",
					"                let currentCount = pmVar.environment.get(\"countOfStatusCheck\");",
					"                if(!currentCount){",
					"                    currentCount=0;",
					"                }",
					"                if(limit){",
					"                    console.log(endpointDescription + \" checking for iteration max.\")",
					"                    if(currentCount==limit-1){",
					"                        console.log(endpointDescription + \" reached maximum number of status checks.\");",
					"                        postmanVar.setNextRequest(null);",
					"                        return \"failed-exceeded max allowed status check attempts.\";",
					"                    } else{",
					"                        pmVar.environment.set(\"countOfStatusCheck\",++currentCount);",
					"                        console.log(endpointDescription + \" retrying\");",
					"                        postmanVar.setNextRequest(endpoint);  ",
					"                        return \"retry\";",
					"                    }",
					"                } else{",
					"                    console.log(endpointDescription + \" retrying\");",
					"                    postmanVar.setNextRequest(endpoint);  ",
					"                    return \"retry\";",
					"                }",
					"        }",
					"    }",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "_importJobIds",
			"value": ""
		},
		{
			"key": "_importJobId",
			"value": ""
		}
	]
}